/* tslint:disable */
/* eslint-disable */
/**
 * API
 * API for the project.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Order,
    OrderFromJSON,
    OrderToJSON,
    OrderCreate,
    OrderCreateFromJSON,
    OrderCreateToJSON,
    OrderUpdateDelivered,
    OrderUpdateDeliveredFromJSON,
    OrderUpdateDeliveredToJSON,
} from '../models';

export interface OrdersCreateRequest {
    data: OrderCreate;
}

export interface OrdersListRequest {
    shippingStartDate?: string;
    shippingEndDate?: string;
}

export interface OrdersUpdateDeliveredRequest {
    id: string;
    data: OrderUpdateDelivered;
}

/**
 * 
 */
export class OrdersApi extends runtime.BaseAPI {

    /**
     */
    async ordersCreateRaw(requestParameters: OrdersCreateRequest): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling ordersCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/orders`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderCreateToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }

    /**
     */
    async ordersCreate(requestParameters: OrdersCreateRequest): Promise<Order> {
        const response = await this.ordersCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async ordersListRaw(requestParameters: OrdersListRequest): Promise<runtime.ApiResponse<Array<Order>>> {
        const queryParameters: any = {};

        if (requestParameters.shippingStartDate !== undefined) {
            queryParameters['shipping_start_date'] = requestParameters.shippingStartDate;
        }

        if (requestParameters.shippingEndDate !== undefined) {
            queryParameters['shipping_end_date'] = requestParameters.shippingEndDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/orders`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrderFromJSON));
    }

    /**
     */
    async ordersList(requestParameters: OrdersListRequest): Promise<Array<Order>> {
        const response = await this.ordersListRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async ordersUpdateDeliveredRaw(requestParameters: OrdersUpdateDeliveredRequest): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling ordersUpdateDelivered.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling ordersUpdateDelivered.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/orders/{id}/update_delivered`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OrderUpdateDeliveredToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }

    /**
     */
    async ordersUpdateDelivered(requestParameters: OrdersUpdateDeliveredRequest): Promise<Order> {
        const response = await this.ordersUpdateDeliveredRaw(requestParameters);
        return await response.value();
    }

}
